오류 : 컴퓨터의 심각한 문제 발생으로 프로그램 종료되는 상태.
    - 개발자가 별도로 처리 불가능.
예외 : 개발자가 구현한 로직 또는 사용자의 영향에 의해 프로그램 종료되는 상태
    - 개발자가 별도로 처리(흐름제어) 가능
    - 이유 : 프로그램이 예상치 못한 종료를 막고 안전한 프로그램을 만들기 위해서
    - Exception
        1. 일반예외 : 컴파일러가 예외 처리 코드 여부를 검사
        2. 실행예외 : 컴파일러가 예외 처리 코드 여부를 검사 하지 않는다.
            - 개발자의 경험 의존도 높다.
    - Exception 클래스 : 모든 실행예외의 상위 클래스 , 다형성 제공

예외처리 문법
    try{
        예외가 발생 하거나 할것 같은 코드;
    }
    catch( 예외클래스 변수명 ){ 예외가 발생했을때 실행할코드; }
    catch( 예외클래스 변수명 ){ 예외가 발생했을때 실행할코드; }
    finally{ 예외가 발생 했던 안했던 무조건 실행되는 코드; }

예외처리 던지기
    - 함수 내부에서 예외 발생시 함수를 호출했던곳으로 예외 전달
    - 예외를 특정한 곳/위치 에서 한번에 처리 할때 주로 사용됨.
    반환타입 함수명( 매개변수 ) throws 예외클래스 { }

예외정의/만들기
    class 클래스명 extends Exception{ }

- 실무 : 대부분의 프레임워크 내 예외처리가 내장 ( 스프링 프레임워크 , JAVAFX 등등 )










